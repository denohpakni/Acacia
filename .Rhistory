install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(c("SNPRelate", "qvalue"))
install.packages("devtools")
library(devtools)
install.packages("dartR")
library(dartR)
# test installation
gl.smearplot(testset.gl)
ScoresAcacia <- gl.read.silicodart(
filename="ScoresV1.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs_V1.csv",
ind.metafile="acacia_pop.csv")
basicStats <- gl.basic.stats(snpAcacia)
ScoresAcacia <- gl.read.silicodart(
filename="ScoresV1.csv",
ind.metafile="acacia_pop.csv")
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
install.packages("devtools")
install.packages("BiocManager")
BiocManager::install(c("SNPRelate", "qvalue"))
install.packages("dartR")
library(devtools)
library(dartR)
# test installation
gl.smearplot(testset.gl)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
basicStats <- gl.basic.stats(snpAcacia)
basicStats
gl.tree.nj(snpAcacia)# Outputs an nj tree to summarize genetic similarity among populations
############################# Diversity ###########################
gl.report.diversity(snpAcacia)
gl.report.heterozygosity(snpAcacia) #Estimates expected Heterozygosity
gl.diagnostics.hwe(snpAcacia)
# The fixation index ( FST) is a measure of population differentiation due to genetic structure.
gl.fst.pop(snpAcacia)
gl.report.heterozygosity(snpAcacia) #Estimates expected Heterozygosity
utils.basic.stats(snpAcacia)
utils.basic.stats(snpAcacia, digits = 4)
utils.basic.stats(snpAcacia, digits = 2)
library(devtools)
library(dartR)
# test installation
gl.smearplot(testset.gl)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
utils.basic.stats(snpAcacia, digits = 2)
utils.basic.stats(snpAcacia)
gl.tree.nj(ScoresAcacia)
############################# Diversity ###########################
gl.report.diversity(snpAcacia)
library(devtools)
library(dartR)
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
gl.tree.nj(snpAcacia)# Outputs an nj tree to summarize genetic similarity among populations
gl.tree.nj(ScoresAcacia)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
sr <- gl.run.structure(snpAcacia, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
ev <- gl.evanno(sr)
ev
qmat <- gl.plot.structure(sr, K=3)
qmat
head(qmat)
head(qmat)
gl.map.structure(qmat, K=3, snpkig, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=3, snpAcacia, scalex=1, scaley=0.5)
############################# Diversity ###########################
gl.report.diversity(snpAcacia)
library(devtools)
library(dartR)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
utils.basic.stats(snpAcacia)
utils.basic.stats(snpAcacia)
gl.basic.stats(snpAcacia)
library(devtools)
library(dartR)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
basic.stats(snpAcacia)
gl.basic.stats(snpAcacia)
basicStats <- gl.basic.stats(snpAcacia)
write.csv(basicStats,file = "./Results/basicStats.csv")
write.csv(basicStats,file = "./Results/basicStats.csv", optional = TRUE, stringsAsFactors = stringsAsFactors)
expectedPopHetz1 <- utils.het.pop(snpkig)
expectedPopHetz1 <- utils.het.pop(snpAcacia)
expectedPopHetz1
#Calculates the expected heterozygosities for each population in a genlight object
expectedPopHetz <- gl.test.heterozygosity(snpAcacia)
observedHetz <- gl.Ho(snpAcacia)
write.csv(observedHetz,file = "./Results/observedHetz.csv")
gl.report.heterozygosity(snpAcacia)
x <- snpAcacia
out <- utils.basic.stats(snpAcacia, digits = 3)
out <- utils.het.pop(snpAcacia)
out
out <- utils.basic.stats(snpAcacia, digits = 3)
gl.report.maf(snpAcacia) # MAF for each locus for SNP data
gl.report.diversity(snpAcacia) #diversity indexes for SNPs
gl.report.heterozygosity(snpAcacia) #Estimates Heterozygosity
write.csv(basicStats,file = "./Results/basicStats.csv")
basicStats
rm basicStats
rmv basicStats
rv basicStats
basicStatSNP <- gl.basic.stats(snpAcacia)
basicStatScore <- gl.basic.stats(ScoresAcacia)
gl.report.heterozygosity(snpAcacia) #Estimates Heterozygosity
gl.report.heterozygosity(ScoresAcacia)
## Run for SNP
sr <- gl.run.structure(snpAcacia, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
###### Population STRUCTURE ##########################
gl.tree.nj(ScoresAcacia)
gl.tree.nj(snpAcacia)# nj tree to summarize genetic similarity among populations
###### Population STRUCTURE ##########################
gl.tree.nj(ScoresAcacia)
ev <- gl.evanno(sr)
ev
qmat <- gl.plot.structure(sr, K=3)
qmat
head(qmat)
gl.map.structure(qmat, K=3, snpkig, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=3, snpAcacia, scalex=1, scaley=0.5)
qmat <- gl.plot.structure(sr, K=3)
################### Hardy-Weinberg tests over loci and populations ############
gl.hwe.pop(snpAcacia)
################### Mantel test ############
mantelTest <- gl.ibd(snpAcacia)
print(mantelTest)
write.csv(mantelTest,file = "./Results/mantelTest.csv")
############## Report private alleles in one population compared with a second population ##############
gl.report.pa(snpkig)
############## Report private alleles in one population compared with a second population ##############
gl.report.pa(snpAcacia)
gl.grm(snpAcacia)
gl.report.parent.offspring
gl.report.parent.offspring(snpAcacia)
gl.report.rdepth(snpAcacia,save2tmp=TRUE)
gl.list.reports()
utils.recalc.avgpic(snpAcacia, verbose= NULL)
gl.report.diversity(snpAcacia)
gl.report.hwe(snpAcacia)
gl.report.maf(snpAcacia)
gl.diagnostics.hwe(snpAcacia)
# The fixation index ( FST) is a measure of population differentiation due to genetic structure.
gl.fst.pop(snpAcacia)
# Generates percentage allele frequencies by locus and population
gl.percent.freq(snpAcacia)
# Generate a geographical map
gl.map.interactive(snpAcacia)
# PCA Analysis
pcaScores <- gl.pcoa(
ScoresAcacia,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
# PCA Analysis
pcasnp <- gl.pcoa(
snpAcacia,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
gl.pcoa.plot(pcaScores, pcasnp)
gl.grm(snpAcacia) # mean probability of identity by state (IBS)
# PCA Analysis
pcaSnp <- gl.pcoa(
snpAcacia,
nfactors = 5,
correction = NULL,
mono.rm = TRUE,
parallel = FALSE,
n.cores = 16,
plot.out = TRUE,
save2tmp = FALSE,
verbose = NULL
)
gl.pcoa.plot(pcaScores, pcaSnp)
gl.grm(snpAcacia) # mean probability of identity by state (IBS)
gl.pcoa.plot(pcaScores)
gl.pcoa.plot(snpAcacia)
gl.grm(snpAcacia) # mean probability of identity by state (IBS)
gl <- ScoresAcacia.gl
gl <- ScoresAcacia
pca <- gl.pcoa.plot(gl)
pca <- gl.pcoa(gl,[1:50,],verbose=2)
pca <- gl.pcoa(gl[1:50,],verbose=2)
pca <- gl.pcoa(gl[1:6,],verbose=2)
gl.pcoa.plot(pca, gl)
gl.pcoa.plot(pca, gl)
gl.pcoa.plot(gl)
gl.pcoa.plot(snpAcacia, gl)
snpgl <- snpAcacia
pca <- gl.pcoa(snpgl[1:50,],verbose=2)
pca <- gl.pcoa(snpgl[1:6,],verbose=2)
gl.report.ld.map(snpAcacia)
gl.report.callrate(snpAcacia)
gl.report.ld.map(snpAcacia)
utils.n.var.invariant(gl, verbose = NULL)
library(devtools)
library(dartR)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
gl.sample(ScoresAcacia)
gl.sample(snpAcacia)
gl.sample(
snpAcacia,
nsample = min(table(pop(snpAcacia))),
replace = TRUE,
onepop = FALSE,
verbose = NULL
)
bssnp <- gl.sample(
snpAcacia,
nsample = min(table(pop(snpAcacia))),
replace = TRUE,
onepop = FALSE,
verbose = NULL
)
library(devtools)
library(dartR)
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
gl.sample(snpAcacia)
gl.pcoa(snpAcacia)
pca <- gl.pcoa(snpAcacia)
gl.pcoa.plot(pca,snpAcacia)
gl.select.shapes(x = pca, select = NULL, verbose = NULL)
NULL
gl.select.shapes(pca)
gl.select.shapes(x = snpAcacia, select = NULL, verbose = NULL)
