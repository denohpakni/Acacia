geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
ggtree(njImpSil3, layout="rectangular")%<+% sil3_info %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
# save the plot
ggsave("dendrogram_imputed_ind_Scores.png", width = 15, height = 20)
ggtree(njImpSil3, layout="circular")%<+% sil3_info %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
# save the Plot
ggsave("dendrogram_imputed_ind_Scores_Circular.png", width = 20, height = 20)
sil4Imp_pop <- gl.dist.pop(njImpSil3, method = "euclidean")
# save imputed  data
save(Jsil3Imp_ind,file="gl5imputed.rdata")
sil4Imp_pop <- gl.dist.pop(Jsil3Imp_ind, method = "euclidean")
sil4Imp_pop <- gl.dist.pop(Jsil3Imp_ind, method = "euclidean")
sil4Imp_pop <- gl.dist.pop(sil3, method = "euclidean")
sil4Imp_pop <- gl.dist.pop(sil3_imputed, method = "euclidean")
# save imputed  data
save(sil3_imputed,file="sil3imputed.rdata")
load("sil3imputed.rdata")
sil4_imputed <- sil3_imputed
pop(sil4_imputed) <- sil4_imputed@other$ind.metrics$pop
pcoa_silico <- gl.pcoa(sil4_imputed, nfactors=10)
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2)
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
indNames("ind"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
indNames= "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
indNames= "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
ind.labels = "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = pop)
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = popNames("pop"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = popNames("SBK1
SBK2
SBK3
SAK1
SAK2
SAK3
SAK4
"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = popNames("SBK1"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "pop")
snp1 <- gl.read.dart(filename ="SNPs.csv",
ind.metafile ="acacia_pop.csv")
snp2 <- snp1
gl.report.monomorphs(snp2)
nLoc(snp1)
gl.report.reproducibility(snp2)
gl.report.callrate(snp2, method="loc")
gl.report.callrate(snp2, method="ind")
snp3 <- gl.filter.monomorphs(snp2, v=0)
nLoc(snp3)
snp4 <- gl.filter.reproducibility(snp3, t=0.95)
nLoc(snp4)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.60,
recalc = T)
nLoc(snp5)
nInd(snp4)
nInd(snp5)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.20,
recalc = T)
nLoc(snp5)
nInd(snp5)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.00,
recalc = T)
nLoc(snp5)
nInd(snp5)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.60, #cant afford to loose all my samples
recalc = T)
nLoc(snp5)
nInd(snp5)
snp6 <- gl.filter.callrate(snp5,
method = "loc",
threshold = 0.70,
recalc = T)
nLoc(snp6)
nInd(snp6)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.10, #cant afford to loose all my samples
recalc = T)
nLoc(snp5)
nInd(snp5)
snp6 <- gl.filter.callrate(snp5,
method = "loc",
threshold = 0.70,
recalc = T)
nLoc(snp6) # 24445
nInd(snp6)
gl.report.maf(snp6)
snp7 <- gl.filter.maf(snp6, threshold = 0.05)
nLoc(snp7)
nInd(snp7)
nPop(snp6)
nPop(snp7)
# Save filtered data
save(snp7, file="snp7_filtered.rdata")
load("snp7_filtered.rdata")
library(poppr)
library(ape)
snp7gi <- gl2gi(snp7)
####---------------------5. Distance and NJ tree for SNPs ----------------####
nInd(snp7gi)
snp8gi <- aboot(snp7gi,
tree="nj",
dist="nei.dist",
sample = 100, #number of iteration for bootstrap
missing = "mean",
showtree=FALSE,
root=FALSE)
library(ggtree)
library(ape)
snpinfo <- read.csv("acacia_pop.csv")
ggtree(snp8gi, layout="rectangular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
ggsave("dendrogram_snp_ind.png", width = 20, height = 20)
ggtree(snp8gi, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
# save the Circular plot
ggsave("dendrogram_Circular_snp_ind.png", width = 20, height = 20)
gl.tree.nj(snp8gi)
snp8gi <- aboot(snp7gi,
tree="nj",
dist="nei.dist",
sample = 100, #number of iteration for bootstrap
missing = "mean",
showtree=FALSE,
root=FALSE)
gl.tree.nj(snp7)
pop(snp7) <- snp7@other$ind.metrics$pop
install.packages("directlabels")
library(directlabels)
pcoa_snps <- gl.pcoa(snp7, nfactors=10)
gl.pcoa.plot(pcoa_snps,
snp7,
xaxis=1,
yaxis=2)
install.packages("iterpc")
install.packages("expm")
install.packages("leaflet")
str1 <- gl.read.dart(filename ="SNPs.csv",ind.metafile ="acacia_pop.csv")
sr <- gl.run.structure(snp7, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
rm(str1)
ev <- gl.evanno(sr)
qmat <- gl.plot.structure(sr, K=4)
qmat <- gl.plot.structure(sr, K=5)
head(qmat)
gl.map.structure(qmat, K=4, gl6snp, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=4, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=4, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=3, snp7, scalex=1, scaley=0.5)
head(qmat)
gl.map.structure(qmat, K=2, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=1, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=5, snp7, scalex=1, scaley=0.5)
qmat <- gl.plot.structure(sr, K=3)
head(qmat)
gl.map.structure(qmat, K=3, snp7, scalex=1, scaley=0.5)
qmat <- gl.plot.structure(sr, K=3)
qmat <- gl.plot.structure(sr, K=8)
qmat <- gl.plot.structure(sr, K=5)
head(qmat)
gl.map.structure(qmat, K=3, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=5, snp7, scalex=1, scaley=0.5)
install.packages(c("dartRverse","devtools","hierfstat"))
library(dartRverse)
library(hierfstat)
install.packages(c("dartRverse","devtools","hierfstat","adegenet"))
install.packages(c("dartRverse", "devtools", "hierfstat", "adegenet"))
library(hierfstat)
snpgl1 <- gl.read.dart(filename ="SNPs.csv",
ind.metafile ="acacia_pop.csv")
gl.report.maf(snpgl1)
gl.report.callrate(snpgl1)
snp2gl <-
# Run EMIBD9 to detect related individuals. Output saved to save time
ibd9 <- gl.run.EMIBD9(snpgl1, Inbreed = FALSE,
emibd9.path = "C:/Program Files (x86)/IoZ_ZSL/EMIBD/")
saveRDS(ibd9, file="./ibd9.rds")
gl.report.heterozygosity(snpgl1)
gl.report.heterozygosity(snpgl1, method = ind) #calculalets relatedness between pops
gl.report.heterozygosity(snpgl1, method = "ind") #calculalets relatedness between pops
gl.report.heterozygosity(snpgl1, method = "pop") #calculalets relatedness between pops
hwe <- gl.report.hwe(snpgl1, multi_comp = TRUE)
gl.map.interactive(snpgl1)
gl.report.callrate(snpgl1)
gl.report.callrate(snpgl1, method = "ind")
gl.report.pic(snpgl1)
snp2gl <- gl.filter.callrate(snpgl1, method = "loc", threshold = 0.8)
nLoc(snp2gl)
nLoc(snpgl1)
#Always run this after removing individuals â€“ removes loci that are no longer variable
snp3gl <- gl.filter.monomorphs(snp2gl)
nLoc(snp2gl)
gl.report.monomorphs(snp2)
gl.report.monomorphs(snp2gl)
gl.report.monomorphs(snp2gl)
gl.report.reproducibility(snp2gl)
gl.report.reproducibility(snp3gl)
snp4gl <- gl.filter.reproducibility(snp3gl)
gl.report.rdepth(snp4gl)
snp5gl <- gl.filter.rdepth(snp4gl, lower = 0, upper = 25)
nLoc(snp5gl)
snp5gl <- gl.filter.rdepth(snp4gl, lower = 0, upper = 90)
nLoc(snp5gl)
snp5gl <- gl.filter.rdepth(snp4gl, lower = 8, upper = 90)
nLoc(snp5gl)
plot(snp5gl)
plot(snpgl1)
snp1gl < - snpgl1
hwe <- gl.report.hwe(snpgl1, multi_comp = TRUE)
gl.report.heterozygossnp2glgl.report.heterozygosity(snpgl1, method = "ind") #calculalets relatedness between pops
# Run EMIBD9 to detect related individuals. Output saved to save time
ibd9 <- gl.run.EMIBD9(snp5gl, Inbreed = FALSE,
emibd9.path = "C:/Program Files (x86)/IoZ_ZSL/EMIBD/")
# save the results
saveRDS(ibd9, file="./ibd9.rds")
gl.report.maf(snp5gl)
pgl1
gl.report.maf(snpgl1)
gl.map.interactive(snp5gl)
gl.report.maf(snp5gl)
gl.report.maf(snp5gl)
gl.report.maf(snp5gl)
gl.report.callrate(snpgl1)
gl.report.maf(snp5gl)
pcoa <- gl.pcoa(snp5gl)
gl.pcoa.plot(pcoa, snp5gl)
#convert the genlight object to genind format
gi <- gl2gi(snp5gl)
#convert genind object to hierfstat format
hfstat <- genind2hierfstat(gi)
#calculate allelic richness
ar <- allelic.richness(hfstat)
names(ar)
summary(ar$Ar) #gives mean AR for each population
ar <- as.data.frame(ar$Ar)
mean.ar <- colMeans(ar)
#first, extend the margins of the graphing window to fit long axis labels
par(mar=c(8,3,3,3))
boxplot(ar, ylab="Allelic richness", las=2, col=tascols)
boxplot(ar, ylab="Allelic richness", las=2)
tascols <- c("skyblue", "#74c476", "skyblue", "#74c476", "#FDD835", "orange", "skyblue",
"orange", "skyblue", "#FDD835", "skyblue", "#74c476", "#74c476", "#FDD835",
"#74c476")
boxplot(ar, ylab="Allelic richness", las=2, col=tascols)
hets <- gl.report.heterozygosity(snp5gl, method="pop")
ind.hets <- gl.report.heterozygosity(gl, method="ind")
ind.hets <- gl.report.heterozygosity(snp5gl, method="ind")
hets <- gl.report.heterozygosity(snp5gl, method="pop")
fsts <- gl.fst.pop(snp5gl, nboots=100, percent=95)
knitr::kable((round(fsts$Fsts,3)))
summary(fsts$Fsts)
# Save  data for next day work
save(snp5gl, file="snp5gl_filtered.rdata")
load("snp5gl_filtered.rdata")
#####------------------ Distance and NJ tree for SNPs ----------------#####
nInd(gi)
gi2 <- aboot(gi,
tree="nj",
dist="nei.dist",
sample = 100, #number of iteration for bootstrap
missing = "mean",
showtree=FALSE,
root=FALSE)
library(ape)
#####------------------ Distance and NJ tree for SNPs ----------------#####
library(poppr)
library(ape)
gi2 <- aboot(gi,
tree="nj",
dist="nei.dist",
sample = 100, #number of iteration for bootstrap
missing = "mean",
showtree=FALSE,
root=FALSE)
snpinfo <- read.csv("acacia_pop.csv")
ggtree(gi2, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#D83F31",
"#00ff00",
"#ff5733",
"#6133ff",
"#fe1993"),
labels = c("embu","kilifi","kiambu","machakos","kwale","meru","nyeri","muranga"))
gl.tree.nj(snp5gl)
ggtree(gi2, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#D83F31",
"#00ff00",
"#ff5733",
"#6133ff",
"#fe1993"),
labels = c("kitui","tsavo","naivasha","rongai"))
install.packages("ggplot")
library(ggplot2)
ggtree(gi2, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#D83F31",
"#00ff00",
"#ff5733",
"#6133ff",
"#fe1993"),
labels = c("kitui","tsavo","naivasha","rongai"))
install.packages("ggtree")
BiocManager::install(version = "3.20")
ggtree(gi2, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#D83F31",
"#00ff00",
"#ff5733",
"#6133ff",
"#fe1993"),
labels = c("kitui","tsavo","naivasha","rongai"))
gl.tree.nj(snp5gl)
gl.tree.nj(snp5gl)
# save the image
ggsave("dendrogram_snp_ind.png", width = 20, height = 20)
ggtree(gi2, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#D83F31",
"#00ff00",
"#ff5733",
"#6133ff",
"#fe1993"),
labels = c("kitui","tsavo","naivasha","rongai"))
#####------------------ Distance and NJ tree for SNPs ----------------#####
library(poppr)
library(ape)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("ape")
install.packages("ape")
install.packages("directlabels")
install.packages("directlabels")
BiocManager::install("ggtree")
library(devtools)
library(directlabels)
ggtree(snp8gi, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
install.packages(c("devtools", "ggplot2", "gridExtra", "gtable", "label.switching",
"tidyr", "dplyr"), dependencies = T)
install.packages(c("devtools", "ggplot2", "gridExtra", "gtable", "label.switching", "tidyr", "dplyr"), dependencies = T)
ggtree(snp8gi, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
ggtree(snp8gi, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
install.packages("ggplot2")
install.packages("ggplot2")
# Save  data and dependencies for next day work
save(snp5gl, file="snp5gl_filtered.rdata")
