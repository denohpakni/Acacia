replace = TRUE,
onepop = FALSE,
verbose = NULL
)
library(devtools)
library(dartR)
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
gl.sample(snpAcacia)
gl.pcoa(snpAcacia)
pca <- gl.pcoa(snpAcacia)
gl.pcoa.plot(pca,snpAcacia)
gl.select.shapes(x = pca, select = NULL, verbose = NULL)
NULL
gl.select.shapes(pca)
gl.select.shapes(x = snpAcacia, select = NULL, verbose = NULL)
library(devtools)
library(dartR)
library(devtools)
library(dartR)
ScoresAcacia <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snpAcacia <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
gl.sample(snpAcacia)
bssnp <- gl.sample(
snpAcacia,
nsample = min(table(pop(snpAcacia))),
replace = TRUE,
onepop = FALSE,
verbose = NULL
)
#### AMOVA ####
# AMOVA is used to detect whether or not there is significant population structure
AMOVA_snp <- gl.amova(snpkig)
#### AMOVA ####
# AMOVA is used to detect whether or not there is significant population structure
AMOVA_snp <- gl.amova(snpAcacia)
AMOVA_snp
AMOVA_Scores <- gl.amova(ScoresAcacia)
AMOVA_Scores
################### Mantel test ############
mantelTest <- gl.ibd(snpAcacia)
gl.grm(snpAcacia)
gl.dist.ind(snpkig)
print(mantelTest)
mantelTest <- gl.ibd(snpAcacia)
############## Report private alleles in one population compared with a second population ##############
gl.report.pa(snpAcacia)
gl.grm(snpAcacia)
library(devtools)
library(dartR)
install.packages(c("devtools", "ggplot2", "gridExtra", "gtable", "label.switching",
"tidyr", "dplyr"), dependencies = T)
install.packages(c("devtools", "ggplot2", "gridExtra", "gtable", "label.switching", "tidyr", "dplyr"), dependencies = T)
install.packages("adegenet")
install.packages("adegenet")
install.packages("ade4")
install.packages("poppr")
install.packages("ape")
install.packages("BiocManager")
BiocManager::install(c("SNPRelate", "qvalue"))
BiocManager::install("ggtree")
install.packages("dartR")
install.packages("directlabels")
library(directlabels)
library(devtools)
library(dartR)
# test installation
gl.smearplot(testset.gl)
sil1 <- gl.read.silicodart(
filename="SilicoDArT.csv",
ind.metafile="acacia_pop.csv")
snp1 <- gl.read.dart(
filename="SNPs.csv",
ind.metafile="acacia_pop.csv")
####### Boot strap #####
gl.sample(sil1)
gl.sample(snp1)
getwd()
basicStatSNP <- gl.basic.stats(snp1)
######################## basic statistics ##################
# for each loci (Hs, Ho, Fis etc.)
install.packages("hierfstat")
basicStatSNP <- gl.basic.stats(snp1)
install.packages("BiocManager")
gl.dist.pop(snp1)
#Calculates the expected heterozygosities for each population in a genlight object
save(sil1, file="sil1.rdata")
# next day
load("sil1.rdata")
#Display names of for the gl object
names(sil1@other$loc.metrics)
indNames(sil1[1:10])
indNames(sil1[1:5])
indNames(sil1)
####-------- Monomorphs Report----------####
gl.report.monomorphs(sil1)
####---------CallRate Report----------####
gl.report.callrate(sil1,method="loc")
# for individual samples
gl.report.callrate(sil1,method="ind")
gl.report.reproducibility(sil1)
sil2 <- gl.filter.reproducibility(
sil1,
threshold = 0.96,
plot.out = TRUE,
)
nLoc(sil2)
sil3 <- gl.filter.callrate(
sil2,
method = "loc",
threshold = 0.95,
mono.rm = FALSE,
recalc = TRUE,
plot.out = TRUE,
)
nLoc(sil3)
nInd(sil3)
# save and load gl filtered data. For using later
save(sil3,file="sil3filtered.rdata")
load("sil3filtered.rdata")
####------------- Geographic Origin ----------####
# you need lat and long co-ordinates
library(maps)
points_sil3 <- read.csv("acacia_pop.csv")
map_sil3 <- borders("world",
regions = c('kitui','tsavo','naivasha','rongai'),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c('kitui','tsavo','naivasha','rongai'),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c('kitui','tsavo','naivasha','rongai',"kenya"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c("kitui","tsavo","naivasha","rongai",),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c("kenya","kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
#Map using ggplot and automatic colors
ggplot() + map_sil3 +
geom_point(data = points_sil3,
aes(x = lon, y = lat, colour = pop)) + # Plot points of location of the samples
scale_color_discrete("pop") +  # Change legend title
xlab("Longitude") +  # X-axis label
ylab("Latitude")+ # Y-axis label
theme_light()+
coord_fixed(ratio = 1) # wont work without actual co-ordinates!
#Map using ggplot and automatic colors
ggplot() + map_sil3 +
geom_point(data = points_sil3,
aes(x = lon, y = lat, colour = pop)) + # Plot points of location of the samples
scale_color_discrete("populations") +  # Change legend title
xlab("Longitude") +  # X-axis label
ylab("Latitude")+ # Y-axis label
theme_light()+
coord_fixed(ratio = 1) # wont work without actual co-ordinates!
map_sil3 <- borders(database = "kenya",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "kenyan",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "africa",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "Kenya",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
county = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c("kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
map_sil3 <- borders(database = "world",
regions = c("kenya","kitui","tsavo","naivasha","rongai"),
fill = "transparent", colour = "black")
####------------- 3. Genetic distance ----------####
gl.dist.pop(sil3)
Jac_sil3_ind <- gl.dist.ind(sil3, method = "jaccard")
####------------- Clustering ----------####
library(ape)
nj_sil3<- nj(sil3)
nj_sil3<- nj(Jac_sil3_ind)
# plot the tree
library(ggtree)
ggtree(nj_sil3)+
geom_tiplab(aes(label=label), color="red", size=1)
# save the plot
ggsave("dendrogram_ind_Scores.png", width = 10, height = 20)
sil3_imputed <- gl.impute(sil3)
Jsil3Imp_ind <- gl.dist.ind(sil3_imputed, method = "jaccard")
njImpSil3 <- nj(Jsil3Imp_ind)
####----Plot imputed data tree---####
ggtree(njImpSil3)+
geom_tiplab(aes(label=label), color="red", size=1)
####----Plot imputed data tree---####
ggtree(njImpSil3)+
geom_tiplab(aes(label=label), color="red", size=3)
ggtree(nj_sil3)+
geom_tiplab(aes(label=label), color="red", size=3)
####----Plot imputed data tree---####
ggtree(njImpSil3)+
geom_tiplab(aes(label=label), color="red", size=3)
####------5. Annotating the tree ------####
library(ggtree)
library(ape)
library(dplyr)
sil3_info < - read.csv("acacia_pop.csv")
sil3_info <- read.csv("acacia_pop.csv")
ggtree(njTree_imputed_silico, layout="rectangular")%<+% scoresinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
ggtree(njImpSil3, layout="rectangular")%<+% sil3_info %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#219C90",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
ggtree(njImpSil3, layout="rectangular")%<+% sil3_info %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
# save the plot
ggsave("dendrogram_imputed_ind_Scores.png", width = 15, height = 20)
ggtree(njImpSil3, layout="circular")%<+% sil3_info %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
# save the Plot
ggsave("dendrogram_imputed_ind_Scores_Circular.png", width = 20, height = 20)
sil4Imp_pop <- gl.dist.pop(njImpSil3, method = "euclidean")
# save imputed  data
save(Jsil3Imp_ind,file="gl5imputed.rdata")
sil4Imp_pop <- gl.dist.pop(Jsil3Imp_ind, method = "euclidean")
sil4Imp_pop <- gl.dist.pop(Jsil3Imp_ind, method = "euclidean")
sil4Imp_pop <- gl.dist.pop(sil3, method = "euclidean")
sil4Imp_pop <- gl.dist.pop(sil3_imputed, method = "euclidean")
# save imputed  data
save(sil3_imputed,file="sil3imputed.rdata")
load("sil3imputed.rdata")
sil4_imputed <- sil3_imputed
pop(sil4_imputed) <- sil4_imputed@other$ind.metrics$pop
pcoa_silico <- gl.pcoa(sil4_imputed, nfactors=10)
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2)
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
indNames("ind"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
xaxis=1,
yaxis=2,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
indNames= "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
indNames= "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations",
ind.labels = "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "populations")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "ind")
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = pop)
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = popNames("pop"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = popNames("SBK1
SBK2
SBK3
SAK1
SAK2
SAK3
SAK4
"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = popNames("SBK1"))
gl.pcoa.plot(pcoa_silico,
sil4_imputed,
scale = FALSE,
ellipse = FALSE,
plevel = 0.95,
pop.labels = "pop")
snp1 <- gl.read.dart(filename ="SNPs.csv",
ind.metafile ="acacia_pop.csv")
snp2 <- snp1
gl.report.monomorphs(snp2)
nLoc(snp1)
gl.report.reproducibility(snp2)
gl.report.callrate(snp2, method="loc")
gl.report.callrate(snp2, method="ind")
snp3 <- gl.filter.monomorphs(snp2, v=0)
nLoc(snp3)
snp4 <- gl.filter.reproducibility(snp3, t=0.95)
nLoc(snp4)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.60,
recalc = T)
nLoc(snp5)
nInd(snp4)
nInd(snp5)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.20,
recalc = T)
nLoc(snp5)
nInd(snp5)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.00,
recalc = T)
nLoc(snp5)
nInd(snp5)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.60, #cant afford to loose all my samples
recalc = T)
nLoc(snp5)
nInd(snp5)
snp6 <- gl.filter.callrate(snp5,
method = "loc",
threshold = 0.70,
recalc = T)
nLoc(snp6)
nInd(snp6)
snp5 <- gl.filter.callrate(snp4,
method = "ind",
threshold = 0.10, #cant afford to loose all my samples
recalc = T)
nLoc(snp5)
nInd(snp5)
snp6 <- gl.filter.callrate(snp5,
method = "loc",
threshold = 0.70,
recalc = T)
nLoc(snp6) # 24445
nInd(snp6)
gl.report.maf(snp6)
snp7 <- gl.filter.maf(snp6, threshold = 0.05)
nLoc(snp7)
nInd(snp7)
nPop(snp6)
nPop(snp7)
# Save filtered data
save(snp7, file="snp7_filtered.rdata")
load("snp7_filtered.rdata")
library(poppr)
library(ape)
snp7gi <- gl2gi(snp7)
####---------------------5. Distance and NJ tree for SNPs ----------------####
nInd(snp7gi)
snp8gi <- aboot(snp7gi,
tree="nj",
dist="nei.dist",
sample = 100, #number of iteration for bootstrap
missing = "mean",
showtree=FALSE,
root=FALSE)
library(ggtree)
library(ape)
snpinfo <- read.csv("acacia_pop.csv")
ggtree(snp8gi, layout="rectangular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
ggsave("dendrogram_snp_ind.png", width = 20, height = 20)
ggtree(snp8gi, layout="circular")%<+% snpinfo %>% +
geom_point(size=1, aes(color=pop))+
geom_tree(aes(color=pop))+
geom_tiplab(aes(label=label), color="black",size=1.5)+
scale_color_manual(values = c("#fc5623",
"#B931FC",
"#EE9322",
"#00ff00"),
labels = c("kitui","tsavo","naivasha","rongai"))
# save the Circular plot
ggsave("dendrogram_Circular_snp_ind.png", width = 20, height = 20)
gl.tree.nj(snp8gi)
snp8gi <- aboot(snp7gi,
tree="nj",
dist="nei.dist",
sample = 100, #number of iteration for bootstrap
missing = "mean",
showtree=FALSE,
root=FALSE)
gl.tree.nj(snp7)
pop(snp7) <- snp7@other$ind.metrics$pop
install.packages("directlabels")
library(directlabels)
pcoa_snps <- gl.pcoa(snp7, nfactors=10)
gl.pcoa.plot(pcoa_snps,
snp7,
xaxis=1,
yaxis=2)
install.packages("iterpc")
install.packages("expm")
install.packages("leaflet")
str1 <- gl.read.dart(filename ="SNPs.csv",ind.metafile ="acacia_pop.csv")
sr <- gl.run.structure(snp7, k.range = 2:5, num.k.rep = 3, exec = './structure.exe')
rm(str1)
ev <- gl.evanno(sr)
qmat <- gl.plot.structure(sr, K=4)
qmat <- gl.plot.structure(sr, K=5)
head(qmat)
gl.map.structure(qmat, K=4, gl6snp, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=4, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=4, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=3, snp7, scalex=1, scaley=0.5)
head(qmat)
gl.map.structure(qmat, K=2, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=1, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=5, snp7, scalex=1, scaley=0.5)
qmat <- gl.plot.structure(sr, K=3)
head(qmat)
gl.map.structure(qmat, K=3, snp7, scalex=1, scaley=0.5)
qmat <- gl.plot.structure(sr, K=3)
qmat <- gl.plot.structure(sr, K=8)
qmat <- gl.plot.structure(sr, K=5)
head(qmat)
gl.map.structure(qmat, K=3, snp7, scalex=1, scaley=0.5)
gl.map.structure(qmat, K=5, snp7, scalex=1, scaley=0.5)
